
****** Activities ******

    Login
    Change Password
    update password

    Water Change
        Create Pond


UPDATED NEEDED.

***use choiseType Enum in model and serializer. (Currently throwing error: type )
***Update Company need to send update asa an array and not indiviayally as a varriable. (check : views,py>companies>post )

Company
    a. Edit : only folks with authority can edit specific parts of company info.
    b. delete : check if requester is authorized to delete company. On ocmpany delete need to delete other company related rows in other database table?
    c. add

models : FishGroup, Buyer/Vendor Id,

   dateSold
   amount
   unitPrice
   fishId
   buyerId
   paid
   paymentBal
   projectId
   pondId



if request.method == 'PUT':
        if Ponds.objects.filter(id=data["pondId"], projectId=data["projectId"]):
            checkIfAuthorized = Project.objects.filter(creatorId=user.id, id=data["projectId"])
            if checkIfAuthorized:
                #***need to update request.data here before sending too be serialized
                PondTodo_Serializers = PondstoDoListSerializers(data=data)
                if PondTodo_Serializers.is_valid():
                    PondTodo_Serializers.save()
                    msg = {"msg" : "Task Has been sucessfully added ", "data" : PondTodo_Serializers.data}
                    return JsonResponse(msg)
                else:
                    return JsonResponse(PondTodo_Serializers.errors, status=status.HTTP_400_BAD_REQUEST)
            else:
                msg = {"msg" : "You are not authorized"}
                return JsonResponse(msg, status=status.HTTP_203_NON_AUTHORITATIVE_INFORMATION)
        else:
            msg = {"msg" : "Pond dosen't exisit in Farm slected, select a pond and try again"}
            return JsonResponse(msg, status=status.HTTP_404_NOT_FOUND)





Expenses
    Dog Feeds



    espenseID
    itemId


    itemGrouping
        itemId,             itemParent

        FishPurchase

item


Expense table (Like MRF) <> Expense Link Table <> item Table (PO details)

    *Expense Link Table to also include deliveryId

Espenses > cost Of 2mm given too fishId 3




Sharp Sand - NGN105,000 - 4BUCKETS @15K per bucket - truck transport 45k, setllement - 5k, going transport 2k  - 9/27/2024




Contact additional Models

class Contacts(models.Model):
    userId = models.IntegerField(null=True)
    firstName = models.CharField(max_length=100)
    lastName = models.CharField(max_length=100)
    dateOfBirth = models.DateTimeField(null=True)
    dataCreated = models.DateTimeField(default=datetime.now)
    creatorId =  models.IntegerField(default=0)
    comments = models.CharField(max_length=1000, null=True)
    statuses = {
        "A": "Active",
        "UV": "Unverified",
        "S": "Suspended",
        "RE": "Removed"
    }
    status = models.CharField(max_length=2, choices=statuses)

class NextOfKin(models.Model):
    userContactId = models.IntegerField()
    kinContactId = models.IntegerField()
    Relationship = models.CharField(max_length=200, null=True)
    comments = models.CharField(max_length=1000, null=True)

class PaymentInfo(models.Model):
    userContactId = models.IntegerField()
    types = {
        "Ze": "Zelle",
        "BT": "Bank Transfer"
    }
    type = models.CharField(max_length=2, choices=types)
    bankName = models.CharField(max_length=100, null=True)
    Name = models.CharField(max_length=100, null=True)
    accountNumber = models.BigIntegerField()

class UserAddress(models.Model):
    userContactId = models.IntegerField()
    address = models.CharField(max_length=1000, null=True)
    title = models.CharField(max_length=100)
    dataCreated = models.DateTimeField(default=datetime.now)
    comments = models.CharField(max_length=1000, null=True)

class UsersSocialMedia(models.Model):
    userContactId = models.IntegerField()
    Name = models.CharField(max_length=100, null=True)
    link = models.CharField(max_length=100, null=True)
    types = {
        "M": "Main",
        "S": "Secondary"
    }
    type = models.CharField(max_length=2, choices=types)
    dataCreated = models.DateTimeField(default=datetime.now)
    comments = models.CharField(max_length=1000, null=True)

class ContactImage(models.Model):
    userContactId = models.IntegerField()
    image = models.ImageField(upload_to="images", null=True)
    types = {
        "L": "Licence",
        "P": "Passport",
        "FF": "FaceFront",
        "FS": "FaceSide",
        "FB": "fullBody",
    }
    type = models.CharField(max_length=2, choices=types)

class PhoneNumbers(models.Model):
    userContactId = models.IntegerField()
    Number = models.CharField(max_length=100, null=True)
    NetworkProvider = models.CharField(max_length=100, null=True)
    types = {
        "M": "Main",
        "S": "Secondary"
    }
    type = models.CharField(max_length=2, choices=types)
    Country = models.CharField(max_length=100, null=True)
    dataCreated = models.DateTimeField(default=datetime.now)
    comments = models.CharField(max_length=1000, null=True)

class Emails(models.Model):
    userContactId = models.IntegerField()
    Email = models.EmailField(max_length=254, null=True)
    types = {
        "M": "Main",
        "S": "Secondary"
    }
    type = models.CharField(max_length=2, choices=types)
    dataCreated = models.DateTimeField(default=datetime.now)
    comments = models.CharField(max_length=1000, null=True)
